<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project source="3.8.0" version="1.0">
  This file is intended to be loaded by Logisim-evolution v3.8.0(https://github.com/logisim-evolution/).

  <lib desc="#Wiring" name="0">
    <tool name="Pin">
      <a name="appearance" val="classic"/>
    </tool>
  </lib>
  <lib desc="#Gates" name="1"/>
  <lib desc="#Plexers" name="2"/>
  <lib desc="#Arithmetic" name="3"/>
  <lib desc="#Memory" name="4"/>
  <lib desc="#I/O" name="5"/>
  <lib desc="#TTL" name="6"/>
  <lib desc="#TCL" name="7"/>
  <lib desc="#Base" name="8"/>
  <lib desc="#BFH-Praktika" name="9"/>
  <lib desc="#Input/Output-Extra" name="10"/>
  <lib desc="#Soc" name="11"/>
  <main name="main"/>
  <options>
    <a name="gateUndefined" val="ignore"/>
    <a name="simlimit" val="1000"/>
    <a name="simrand" val="0"/>
  </options>
  <mappings>
    <tool lib="8" map="Button2" name="Poke Tool"/>
    <tool lib="8" map="Button3" name="Menu Tool"/>
    <tool lib="8" map="Ctrl Button1" name="Menu Tool"/>
  </mappings>
  <toolbar>
    <tool lib="8" name="Poke Tool"/>
    <tool lib="8" name="Edit Tool"/>
    <tool lib="8" name="Wiring Tool"/>
    <tool lib="8" name="Text Tool"/>
    <sep/>
    <tool lib="0" name="Pin"/>
    <tool lib="0" name="Pin">
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
    </tool>
    <sep/>
    <tool lib="1" name="NOT Gate"/>
    <tool lib="1" name="AND Gate"/>
    <tool lib="1" name="OR Gate"/>
    <tool lib="1" name="XOR Gate"/>
    <tool lib="1" name="NAND Gate"/>
    <tool lib="1" name="NOR Gate"/>
    <sep/>
    <tool lib="4" name="D Flip-Flop"/>
    <tool lib="4" name="Register"/>
  </toolbar>
  <circuit name="main">
    <a name="appearance" val="logisim_evolution"/>
    <a name="circuit" val="main"/>
    <a name="circuitnamedboxfixedsize" val="true"/>
    <a name="downloadBoard" val="NEXYS4_DDR_NOU"/>
    <a name="downloadFrequency" val="1000.0"/>
    <a name="simulationFrequency" val="2048000.0"/>
    <boardmap boardname="NEXYS4_DDR_NOU">
      <mc key="/Input_1" map="601,325"/>
      <mc key="/Input_2" map="572,325"/>
      <mc key="/Input_bus_1" pmap="128_325_0,94_325_0"/>
      <mc key="/Input_bus_2" pmap="197_325_0,163_325_0"/>
      <mc key="/Input_bus_3" pmap="266_325_0,233_325_0"/>
      <mc key="/Input_bus_4" pmap="334_325_0,300_325_0"/>
      <mc key="/Input_bus_5" pmap="403_325_0,368_325_0"/>
      <mc key="/Input_bus_6" pmap="470_325_0,436_325_0"/>
      <mc key="/L_7_Segment_Display_1" pmap="162_219_0,184_224_0,184_243_0,164_257_0,153_243_0,153_223_0,164_237_0,590_271_0"/>
      <mc key="/M_Begin" map="107,271"/>
      <mc key="/Output_1" map="496,271"/>
      <mc key="/Output_2" map="435,271"/>
      <mc key="/Output_3" map="337,271"/>
      <mc key="/Output_4" map="370,271"/>
      <mc key="/Output_bus_11" pmap="289_200_0,248_200_0,208_200_0,160_200_0"/>
      <mc key="/Stare_A" map="140,271"/>
      <mc key="/Stare_B" map="172,271"/>
      <mc key="/Stare_C" map="206,271"/>
      <mc key="/Stare_D" map="240,271"/>
      <mc key="/buton1" map="477,138"/>
      <mc key="/buton2" map="522,138"/>
      <mc key="/switch" map="536,325"/>
      <mc key="/switch2" map="503,325"/>
    </boardmap>
    <comp lib="0" loc="(1000,300)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="south"/>
      <a name="label" val="Output_1"/>
      <a name="output" val="true"/>
    </comp>
    <comp lib="0" loc="(1020,280)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="south"/>
      <a name="label" val="Output_2"/>
      <a name="output" val="true"/>
    </comp>
    <comp lib="0" loc="(1040,890)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="label" val="Output_3"/>
      <a name="output" val="true"/>
    </comp>
    <comp lib="0" loc="(1280,1090)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
      <a name="radix" val="10unsigned"/>
      <a name="width" val="10"/>
    </comp>
    <comp lib="0" loc="(1300,310)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="south"/>
      <a name="label" val="M_Begin"/>
      <a name="output" val="true"/>
    </comp>
    <comp lib="0" loc="(1320,290)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="south"/>
      <a name="label" val="Stare_A"/>
      <a name="output" val="true"/>
    </comp>
    <comp lib="0" loc="(1340,270)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="south"/>
      <a name="label" val="Stare_B"/>
      <a name="output" val="true"/>
    </comp>
    <comp lib="0" loc="(1360,250)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="south"/>
      <a name="label" val="Stare_C"/>
      <a name="output" val="true"/>
    </comp>
    <comp lib="0" loc="(1380,230)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="south"/>
      <a name="label" val="Stare_D"/>
      <a name="output" val="true"/>
    </comp>
    <comp lib="0" loc="(1690,1040)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="label" val="Output_bus_11"/>
      <a name="output" val="true"/>
      <a name="width" val="4"/>
    </comp>
    <comp lib="0" loc="(1770,1020)" name="Splitter">
      <a name="facing" val="south"/>
      <a name="fanout" val="7"/>
      <a name="incoming" val="7"/>
    </comp>
    <comp lib="0" loc="(1980,1190)" name="Ground"/>
    <comp lib="0" loc="(490,840)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="buton1"/>
    </comp>
    <comp lib="0" loc="(490,920)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="buton2"/>
    </comp>
    <comp lib="0" loc="(520,990)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="switch"/>
    </comp>
    <comp lib="0" loc="(670,320)" name="Clock"/>
    <comp lib="0" loc="(870,940)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="Input_bus_6"/>
      <a name="width" val="2"/>
    </comp>
    <comp lib="0" loc="(900,990)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="label" val="Output_4"/>
      <a name="output" val="true"/>
    </comp>
    <comp lib="0" loc="(910,510)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="Input_2"/>
    </comp>
    <comp lib="0" loc="(920,430)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="switch2"/>
    </comp>
    <comp lib="0" loc="(930,390)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="Input_1"/>
    </comp>
    <comp lib="0" loc="(930,410)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="Input_bus_1"/>
      <a name="width" val="2"/>
    </comp>
    <comp lib="0" loc="(990,750)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="Input_bus_2"/>
      <a name="width" val="2"/>
    </comp>
    <comp lib="0" loc="(990,770)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="Input_bus_3"/>
      <a name="width" val="2"/>
    </comp>
    <comp lib="0" loc="(990,790)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="Input_bus_4"/>
      <a name="width" val="2"/>
    </comp>
    <comp lib="0" loc="(990,810)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="Input_bus_5"/>
      <a name="width" val="2"/>
    </comp>
    <comp lib="5" loc="(1890,1110)" name="7-Segment Display">
      <a name="label" val="L_7_Segment_Display_1"/>
    </comp>
    <comp loc="(1170,920)" name="citire_bancnote">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="citire_bancnote_1"/>
    </comp>
    <comp loc="(1270,320)" name="delayer">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="delayer_1"/>
    </comp>
    <comp loc="(1270,370)" name="UC">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="uc_1"/>
    </comp>
    <comp loc="(1270,750)" name="citire_PIN">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="citire_pin_1"/>
    </comp>
    <comp loc="(1430,920)" name="convertor_suma">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="convertor_suma_5"/>
    </comp>
    <comp loc="(1690,1020)" name="afisor_structural">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="afisor_structural_1"/>
    </comp>
    <comp loc="(1690,370)" name="RAM_sold_bancnote">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="ram_sold_bancnote_1"/>
    </comp>
    <comp loc="(1690,520)" name="RAM_sold_cont">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="ram_sold_cont_1"/>
    </comp>
    <comp loc="(1690,740)" name="RAM_PIN">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="ram_pin_1"/>
    </comp>
    <comp loc="(1690,900)" name="comparator_10">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="comparator_10_1"/>
    </comp>
    <comp loc="(1940,520)" name="convertor_suma">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="convertor_suma_2"/>
      <a name="labelvisible" val="true"/>
    </comp>
    <comp loc="(2160,600)" name="SAU_12Biti">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="sau_12biti_1"/>
    </comp>
    <comp loc="(2160,780)" name="scazator_retragere">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="scazator_retragere_1"/>
    </comp>
    <comp loc="(2160,890)" name="sumator_depunere">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="sumator_depunere_1"/>
    </comp>
    <comp loc="(2170,1010)" name="SAU_1Bit">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="sau_1bit_1"/>
    </comp>
    <comp loc="(2170,690)" name="SAU_12Biti">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="sau_12biti_2"/>
      <a name="labelvisible" val="true"/>
    </comp>
    <comp loc="(950,470)" name="not1">
      <a name="appearance" val="logisim_evolution"/>
      <a name="facing" val="north"/>
      <a name="label" val="not1_1"/>
    </comp>
    <comp loc="(960,320)" name="div_frecv">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="div_frecv_1"/>
    </comp>
    <wire from="(1000,300)" to="(1000,470)"/>
    <wire from="(1000,470)" to="(1050,470)"/>
    <wire from="(1010,450)" to="(1010,870)"/>
    <wire from="(1010,450)" to="(1020,450)"/>
    <wire from="(1010,870)" to="(1700,870)"/>
    <wire from="(1020,280)" to="(1020,450)"/>
    <wire from="(1020,450)" to="(1050,450)"/>
    <wire from="(1030,530)" to="(1030,830)"/>
    <wire from="(1030,530)" to="(1050,530)"/>
    <wire from="(1030,830)" to="(1050,830)"/>
    <wire from="(1050,550)" to="(1050,720)"/>
    <wire from="(1170,920)" to="(1190,920)"/>
    <wire from="(1190,1000)" to="(1870,1000)"/>
    <wire from="(1190,920)" to="(1190,1000)"/>
    <wire from="(1190,920)" to="(1210,920)"/>
    <wire from="(1270,320)" to="(1400,320)"/>
    <wire from="(1270,370)" to="(1290,370)"/>
    <wire from="(1270,390)" to="(1470,390)"/>
    <wire from="(1270,410)" to="(1370,410)"/>
    <wire from="(1270,430)" to="(1330,430)"/>
    <wire from="(1270,450)" to="(1390,450)"/>
    <wire from="(1270,470)" to="(1350,470)"/>
    <wire from="(1270,490)" to="(1310,490)"/>
    <wire from="(1270,510)" to="(1280,510)"/>
    <wire from="(1270,530)" to="(1300,530)"/>
    <wire from="(1270,550)" to="(1320,550)"/>
    <wire from="(1270,570)" to="(1340,570)"/>
    <wire from="(1270,590)" to="(1360,590)"/>
    <wire from="(1270,610)" to="(1380,610)"/>
    <wire from="(1270,750)" to="(1300,750)"/>
    <wire from="(1280,510)" to="(1280,780)"/>
    <wire from="(1280,780)" to="(1470,780)"/>
    <wire from="(1280,970)" to="(1280,1090)"/>
    <wire from="(1280,970)" to="(1430,970)"/>
    <wire from="(1290,370)" to="(1290,900)"/>
    <wire from="(1290,900)" to="(1470,900)"/>
    <wire from="(1300,310)" to="(1300,530)"/>
    <wire from="(1300,750)" to="(1300,800)"/>
    <wire from="(1300,800)" to="(1470,800)"/>
    <wire from="(1310,490)" to="(1310,890)"/>
    <wire from="(1310,890)" to="(1370,890)"/>
    <wire from="(1320,290)" to="(1320,550)"/>
    <wire from="(1330,430)" to="(1330,860)"/>
    <wire from="(1330,860)" to="(1800,860)"/>
    <wire from="(1340,270)" to="(1340,570)"/>
    <wire from="(1350,470)" to="(1350,540)"/>
    <wire from="(1350,540)" to="(1470,540)"/>
    <wire from="(1360,250)" to="(1360,590)"/>
    <wire from="(1370,1040)" to="(1470,1040)"/>
    <wire from="(1370,410)" to="(1370,720)"/>
    <wire from="(1370,720)" to="(1900,720)"/>
    <wire from="(1370,890)" to="(1370,1040)"/>
    <wire from="(1380,230)" to="(1380,610)"/>
    <wire from="(1390,450)" to="(1390,760)"/>
    <wire from="(1390,760)" to="(1470,760)"/>
    <wire from="(1400,320)" to="(1400,370)"/>
    <wire from="(1400,370)" to="(1400,520)"/>
    <wire from="(1400,370)" to="(1470,370)"/>
    <wire from="(1400,520)" to="(1400,740)"/>
    <wire from="(1400,520)" to="(1470,520)"/>
    <wire from="(1400,740)" to="(1470,740)"/>
    <wire from="(1410,560)" to="(1410,670)"/>
    <wire from="(1410,560)" to="(1470,560)"/>
    <wire from="(1410,670)" to="(1730,670)"/>
    <wire from="(1430,920)" to="(1430,970)"/>
    <wire from="(1430,920)" to="(1470,920)"/>
    <wire from="(1440,1060)" to="(1470,1060)"/>
    <wire from="(1440,940)" to="(1440,990)"/>
    <wire from="(1440,940)" to="(1470,940)"/>
    <wire from="(1440,990)" to="(1440,1060)"/>
    <wire from="(1440,990)" to="(1760,990)"/>
    <wire from="(1450,410)" to="(1450,500)"/>
    <wire from="(1450,410)" to="(1470,410)"/>
    <wire from="(1450,500)" to="(2200,500)"/>
    <wire from="(1450,580)" to="(1450,640)"/>
    <wire from="(1450,580)" to="(1470,580)"/>
    <wire from="(1450,640)" to="(1690,640)"/>
    <wire from="(1460,430)" to="(1460,480)"/>
    <wire from="(1460,430)" to="(1470,430)"/>
    <wire from="(1460,480)" to="(1460,600)"/>
    <wire from="(1460,480)" to="(2250,480)"/>
    <wire from="(1460,600)" to="(1470,600)"/>
    <wire from="(1690,1020)" to="(1770,1020)"/>
    <wire from="(1690,370)" to="(1700,370)"/>
    <wire from="(1690,520)" to="(1710,520)"/>
    <wire from="(1690,570)" to="(1690,640)"/>
    <wire from="(1690,570)" to="(2190,570)"/>
    <wire from="(1690,740)" to="(1710,740)"/>
    <wire from="(1690,760)" to="(1730,760)"/>
    <wire from="(1690,900)" to="(1700,900)"/>
    <wire from="(1700,370)" to="(1700,460)"/>
    <wire from="(1700,460)" to="(2040,460)"/>
    <wire from="(1700,870)" to="(1700,900)"/>
    <wire from="(1710,520)" to="(1710,560)"/>
    <wire from="(1710,520)" to="(1720,520)"/>
    <wire from="(1710,560)" to="(1740,560)"/>
    <wire from="(1710,700)" to="(1710,740)"/>
    <wire from="(1730,670)" to="(1730,760)"/>
    <wire from="(1740,560)" to="(1740,820)"/>
    <wire from="(1740,820)" to="(1740,910)"/>
    <wire from="(1740,820)" to="(1940,820)"/>
    <wire from="(1740,910)" to="(1940,910)"/>
    <wire from="(1750,560)" to="(1750,800)"/>
    <wire from="(1750,560)" to="(2040,560)"/>
    <wire from="(1750,800)" to="(1750,930)"/>
    <wire from="(1750,800)" to="(1940,800)"/>
    <wire from="(1750,930)" to="(1940,930)"/>
    <wire from="(1760,580)" to="(1760,990)"/>
    <wire from="(1760,580)" to="(1940,580)"/>
    <wire from="(1780,1040)" to="(1780,1080)"/>
    <wire from="(1780,1080)" to="(1910,1080)"/>
    <wire from="(1790,1040)" to="(1790,1070)"/>
    <wire from="(1790,1070)" to="(1920,1070)"/>
    <wire from="(1800,1040)" to="(1800,1200)"/>
    <wire from="(1800,1200)" to="(1910,1200)"/>
    <wire from="(1800,860)" to="(1800,890)"/>
    <wire from="(1800,890)" to="(1940,890)"/>
    <wire from="(1810,1040)" to="(1810,1190)"/>
    <wire from="(1810,1190)" to="(1900,1190)"/>
    <wire from="(1820,1040)" to="(1820,1180)"/>
    <wire from="(1820,1180)" to="(1890,1180)"/>
    <wire from="(1830,1040)" to="(1830,1060)"/>
    <wire from="(1830,1060)" to="(1900,1060)"/>
    <wire from="(1840,1040)" to="(1840,1050)"/>
    <wire from="(1840,1050)" to="(1890,1050)"/>
    <wire from="(1870,1000)" to="(1930,1000)"/>
    <wire from="(1870,840)" to="(1870,1000)"/>
    <wire from="(1870,840)" to="(1940,840)"/>
    <wire from="(1890,1050)" to="(1890,1110)"/>
    <wire from="(1890,1170)" to="(1890,1180)"/>
    <wire from="(1900,1060)" to="(1900,1110)"/>
    <wire from="(1900,1170)" to="(1900,1190)"/>
    <wire from="(1900,720)" to="(1900,780)"/>
    <wire from="(1900,780)" to="(1940,780)"/>
    <wire from="(1910,1080)" to="(1910,1110)"/>
    <wire from="(1910,1170)" to="(1910,1200)"/>
    <wire from="(1910,600)" to="(1910,670)"/>
    <wire from="(1910,600)" to="(1940,600)"/>
    <wire from="(1910,670)" to="(2230,670)"/>
    <wire from="(1920,1070)" to="(1920,1110)"/>
    <wire from="(1920,1170)" to="(1920,1180)"/>
    <wire from="(1920,1180)" to="(1980,1180)"/>
    <wire from="(1920,620)" to="(1920,660)"/>
    <wire from="(1920,620)" to="(1940,620)"/>
    <wire from="(1920,660)" to="(2240,660)"/>
    <wire from="(1920,690)" to="(1920,760)"/>
    <wire from="(1920,690)" to="(1950,690)"/>
    <wire from="(1920,760)" to="(2210,760)"/>
    <wire from="(1930,710)" to="(1930,750)"/>
    <wire from="(1930,710)" to="(1950,710)"/>
    <wire from="(1930,750)" to="(2220,750)"/>
    <wire from="(1930,950)" to="(1930,1000)"/>
    <wire from="(1930,950)" to="(1940,950)"/>
    <wire from="(1940,1010)" to="(1950,1010)"/>
    <wire from="(1940,1030)" to="(1940,1070)"/>
    <wire from="(1940,1030)" to="(1950,1030)"/>
    <wire from="(1940,1070)" to="(2190,1070)"/>
    <wire from="(1940,520)" to="(1940,580)"/>
    <wire from="(1940,990)" to="(1940,1010)"/>
    <wire from="(1940,990)" to="(2180,990)"/>
    <wire from="(1980,1180)" to="(1980,1190)"/>
    <wire from="(2040,460)" to="(2040,560)"/>
    <wire from="(2160,600)" to="(2190,600)"/>
    <wire from="(2160,780)" to="(2210,780)"/>
    <wire from="(2160,800)" to="(2230,800)"/>
    <wire from="(2160,820)" to="(2180,820)"/>
    <wire from="(2160,890)" to="(2220,890)"/>
    <wire from="(2160,910)" to="(2170,910)"/>
    <wire from="(2160,930)" to="(2190,930)"/>
    <wire from="(2170,1000)" to="(2240,1000)"/>
    <wire from="(2170,1010)" to="(2250,1010)"/>
    <wire from="(2170,690)" to="(2200,690)"/>
    <wire from="(2170,910)" to="(2170,1000)"/>
    <wire from="(2180,820)" to="(2180,990)"/>
    <wire from="(2190,570)" to="(2190,600)"/>
    <wire from="(2190,930)" to="(2190,1070)"/>
    <wire from="(2200,500)" to="(2200,690)"/>
    <wire from="(2210,760)" to="(2210,780)"/>
    <wire from="(2220,750)" to="(2220,890)"/>
    <wire from="(2230,670)" to="(2230,800)"/>
    <wire from="(2240,660)" to="(2240,1000)"/>
    <wire from="(2250,480)" to="(2250,1010)"/>
    <wire from="(490,840)" to="(990,840)"/>
    <wire from="(490,920)" to="(890,920)"/>
    <wire from="(520,990)" to="(810,990)"/>
    <wire from="(670,320)" to="(730,320)"/>
    <wire from="(730,320)" to="(730,370)"/>
    <wire from="(730,320)" to="(740,320)"/>
    <wire from="(730,370)" to="(800,370)"/>
    <wire from="(800,1020)" to="(1470,1020)"/>
    <wire from="(800,370)" to="(800,1020)"/>
    <wire from="(810,720)" to="(1050,720)"/>
    <wire from="(810,720)" to="(810,960)"/>
    <wire from="(810,960)" to="(810,990)"/>
    <wire from="(810,960)" to="(950,960)"/>
    <wire from="(870,940)" to="(950,940)"/>
    <wire from="(890,920)" to="(890,990)"/>
    <wire from="(890,920)" to="(950,920)"/>
    <wire from="(890,990)" to="(900,990)"/>
    <wire from="(910,510)" to="(1050,510)"/>
    <wire from="(920,430)" to="(1050,430)"/>
    <wire from="(930,390)" to="(1050,390)"/>
    <wire from="(930,410)" to="(1050,410)"/>
    <wire from="(950,470)" to="(1000,470)"/>
    <wire from="(950,690)" to="(950,700)"/>
    <wire from="(950,700)" to="(990,700)"/>
    <wire from="(960,320)" to="(980,320)"/>
    <wire from="(980,320)" to="(1050,320)"/>
    <wire from="(980,320)" to="(980,370)"/>
    <wire from="(980,370)" to="(1050,370)"/>
    <wire from="(990,490)" to="(1050,490)"/>
    <wire from="(990,490)" to="(990,700)"/>
    <wire from="(990,700)" to="(1710,700)"/>
    <wire from="(990,750)" to="(1050,750)"/>
    <wire from="(990,770)" to="(1050,770)"/>
    <wire from="(990,790)" to="(1050,790)"/>
    <wire from="(990,810)" to="(1050,810)"/>
    <wire from="(990,830)" to="(1030,830)"/>
    <wire from="(990,830)" to="(990,840)"/>
    <wire from="(990,840)" to="(990,890)"/>
    <wire from="(990,890)" to="(1040,890)"/>
  </circuit>
  <circuit name="test">
    <a name="appearance" val="logisim_evolution"/>
    <a name="circuit" val="test"/>
    <a name="circuitnamedboxfixedsize" val="true"/>
    <a name="downloadFrequency" val="2083333.3333333333"/>
    <a name="simulationFrequency" val="2048000.0"/>
    <comp loc="(1200,440)" name="main"/>
  </circuit>
  <vhdl name="comparator_10">--comparator 10 biti
LIBRARY ieee;
USE ieee.std_logic_1164.all;

ENTITY comparator_10 IS
  PORT (	enable: in std_logic;
  		A, B: in std_logic_vector(9 downto 0);
        	posibil: out std_logic
);
END comparator_10;


ARCHITECTURE Arch_comp_10 OF comparator_10 IS
BEGIN

    process(A, B, enable)
    begin
    	posibil&lt;='0';
    	if(enable = '1') then
        	if(A &gt; B) then
         	   	posibil&lt;='0';
        	elsif (A = B) then
            	posibil&lt;='1';
        	else
            	posibil&lt;='1';
        	end if;
	end if;
    end process;
END Arch_comp_10;</vhdl>
  <vhdl name="sumator_scazator">--sumator/scazator
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_unsigned.all;


ENTITY sumator_scazator IS
    PORT (enable: in std_logic;
          a, b : in std_logic_vector(9 downto 0);
          sel : in std_logic;    --0 =&gt; +;     1 =&gt; -
          output : out std_logic_vector(9 downto 0)
    );
END sumator_scazator;


ARCHITECTURE arh OF sumator_scazator IS

BEGIN
    process(a, b, sel, enable)    
    begin
    	   if(enable = '1') then
        		if(sel = '0') then
            		output &lt;= a + b;
        		else 
            		output &lt;= a - b;
        		end if;
    	   end if;
    end process;
END arh;</vhdl>
  <vhdl name="RAM_sold_bancnote">--ram sold bancnote
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.numeric_std.all;
USE ieee.std_logic_unsigned.all;


ENTITY RAM_sold_bancnote IS
    PORT (clk, enable : in std_logic;
       	load : in std_logic_vector(11 downto 0);
        	mode : in std_logic;    -- 0 =&gt; read;   1 =&gt; write
        	output : out std_logic_vector(11 downto 0)
       );
END RAM_sold_bancnote;
	
ARCHITECTURE arh OF RAM_sold_bancnote IS

    	type matrice is array (0 to 3) of std_logic_vector(2 downto 0); 

BEGIN
    	process(load, mode, enable, clk)
        	variable mem : matrice := ("001", "010", "000", "011");
        	variable aux : std_logic_vector(11 downto 0);
    	begin
    	if(clk = '1' and clk'event) then
    		if(enable = '1') then
     		if(mode = '0') then    --read
            		aux(11 downto 9) := mem(0);  
            		aux(8 downto 6) := mem(1); 
            		aux(5 downto 3) := mem(2);  
            		aux(2 downto 0) := mem(3);   
       	 	elsif (mode = '1') then --write
        			mem(0) := load(11 downto 9);
        			mem(1) := load(8 downto 6);
        			mem(2) := load(5 downto 3);
        			mem(3) := load(2 downto 0);
        		end if;
        		output &lt;= aux;
        	end if;
   	end if;
   	end process;
    

END arh;</vhdl>
  <vhdl name="RAM_PIN">--memorie ram PIN

LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.numeric_std.all;
USE ieee.std_logic_unsigned.all;


ENTITY RAM_PIN IS
    PORT (clk, enable, mode: in std_logic;    -- switch
        	input: in std_logic_vector(7 downto 0); --citire ram
        	finded: out std_logic;
       	position: out std_logic_vector(1 downto 0));    
END RAM_PIN;

ARCHITECTURE arch OF RAM_PIN IS
    type matrice is array(0 to 3) of std_logic_vector(7 downto 0);
BEGIN

    process(mode, clk, input, enable)
        variable mem: matrice:=("00110110", "10000111", "11111010", "10110001");
        variable pozitie_veche: integer :=100;
        variable contor: integer :=0;
        variable succesful: std_logic :='0';
    begin
            if(enable = '1') then
            	if(clk'event and clk='1') then
            		succesful := '0';
                	if(mode = '0') then
                		for i in 0 to 3 loop
	            			if(mem(i) = input) then
	                    		succesful:='1';
	                 			pozitie_veche := i;
	                 		end if;
	                 	end loop;
                	elsif(mode = '1') then
	              	   	mem(pozitie_veche) := input; --scriere
	              	   	succesful := '0';
	              	end if;
            	end if;
            end if;
            finded &lt;= succesful;
            position &lt;= std_logic_vector(to_unsigned(pozitie_veche, 2));
    end process;
END arch;</vhdl>
  <vhdl name="RAM_sold_cont">LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.numeric_std.all;
USE ieee.std_logic_unsigned.all;

ENTITY RAM_sold_cont IS
     PORT (
     	clk, enable : in std_logic;
         	adress_ram: in std_logic_vector(1 downto 0);
        	load: in std_logic_vector(11 downto 0);
        	mode: in std_logic;  --0 =&gt; read, 1 =&gt; write
          output: out std_logic_vector(11 downto 0)
    );
END RAM_sold_cont;


ARCHITECTURE TypeArchitecture OF RAM_sold_cont IS
    	type matrice is array (0 to 3) of std_logic_vector(11 downto 0); 
BEGIN
   	process(adress_ram, load, mode, enable, clk)
    
    	variable mem : matrice := ("000001010000", "001011000100", "000010000001", "001011001001");
    	begin
    		if(clk = '1' and clk'event) then
    			if(enable = '1') then
        			if(mode = '0') then 
            			output &lt;= mem(conv_integer(adress_ram));  --read
        			elsif (mode = '1') then
            			mem(conv_integer(adress_ram)) := load; --write
        			end if;
       	 	end if;
    		end if;
    	end process;
END TypeArchitecture;</vhdl>
  <vhdl name="UC">LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.numeric_std.all;
USE ieee.std_logic_unsigned.all;

ENTITY UC IS
  PORT (clock, reset: in std_logic;
  	   selectie: in std_logic_vector(1 downto 0);
  	   urm : in std_logic;
	   rez_comp, rez_ver_PIN, Ok_PIN: in std_logic;
	   Confirm_sel, Confirm_PIN, Confirm_sum: in std_logic;
	   En_comp,En_RAM_papers, EN_scz, En_sum, En_Ram_Pin, EN_Ram_Sold, EN_Afisor, mode: out std_logic;
	   --error : out std_logic;
	   Starea_M, Starea_A, Starea_B, Starea_C, Starea_D: out std_logic);
END UC;

ARCHITECTURE UC_Architecture OF UC IS

	type states is (M_begin, M_Check_PIN, M_wait_sel, A_display, B_Wait_for_sum, B_Compare_account,
				 B_Substract, B_Delay, C_Wait_for_sum, C_Add_account, C_Delay , D_Enter_new_PIN, D_Verify_PIN, D_Modify_PIN);
	signal NX_STATE: states := M_begin;	
	signal STATE : states := M_begin;
BEGIN

UPDATE_STATE : process (reset, clock)
	begin			
		if (Reset = '1') then
			STATE &lt;= M_begin;
		elsif (clock'EVENT and clock = '1') then
			STATE &lt;= NX_STATE;
		end if;
	end process UPDATE_STATE;

TRANSITIONS: process(STATE, Confirm_sel, Confirm_PIN, Confirm_sum, rez_comp, rez_ver_PIN, Ok_PIN, urm)
	begin
		case STATE is 
			when M_begin =&gt; 	if(Confirm_PIN = '1') then
								NX_STATE &lt;= M_Check_PIN;
							elsif(Confirm_PIN = '0') then
								NX_STATE &lt;= M_begin;
							end if;
			when M_Check_PIN =&gt; if( Ok_PIN = '0') then 
								NX_STATE&lt;=M_begin;
							elsif( Ok_PIN = '1') then 
								NX_STATE&lt;=M_wait_sel;
							end if;
			when M_wait_sel =&gt; if( Confirm_sel = '0') then
								NX_STATE&lt;=M_wait_sel;
							elsif (Confirm_sel = '1') then
								case selectie is
									when "00" =&gt; NX_STATE&lt;=A_display;
									when "01" =&gt; NX_STATE&lt;=B_Wait_for_sum;
									when "10" =&gt; NX_STATE&lt;=C_Wait_for_sum;
									when others =&gt; NX_STATE&lt;=D_Enter_new_PIN;
								end case;
							end if;
----------------------------------------------------A-------------------------------------------------------------------------------------------
			when A_Display =&gt; 	if(urm = '1') then 
								NX_STATE &lt;= M_wait_sel;
						   	elsif(urm = '0') then
								NX_STATE &lt;= A_Display;
							end if;
----------------------------------------------------B-------------------------------------------------------------------------------------------
			when B_Wait_for_sum =&gt; 	if(Confirm_sum = '1') then
									NX_STATE &lt;= B_Compare_account;
								elsif(Confirm_sum = '0') then
									NX_STATE &lt;= B_Wait_for_sum;
							   	end if;
			when B_Compare_account =&gt; if(rez_comp = '0') then
									NX_STATE&lt;=M_begin;
								elsif(rez_comp = '1') then
									NX_STATE&lt;=B_Substract;
								end if;
			when B_Substract =&gt; NX_STATE &lt;= B_Delay;
			when B_Delay =&gt; 	if(urm = '1') then 
								NX_STATE &lt;= M_wait_sel;
							elsif(urm = '0') then
								NX_STATE &lt;= B_Delay;
							end if;
			
----------------------------------------------------C-------------------------------------------------------------------------------------------
			when C_Wait_for_sum =&gt; 	if(Confirm_sum = '1') then
									NX_STATE &lt;= C_Add_account;
								elsif(Confirm_sum = '0') then
									NX_STATE &lt;= C_Wait_for_sum;
							   	end if;
			when C_Add_account =&gt; NX_STATE &lt;= C_Delay;
			when C_Delay =&gt; 	if(urm = '1') then
								NX_STATE &lt;= M_wait_sel;
							elsif(urm = '0') then
								NX_STATE &lt;= C_Delay;
							end if;
			
----------------------------------------------------D-------------------------------------------------------------------------------------------
			when D_Enter_new_PIN =&gt; if(Confirm_PIN = '1') then
									NX_STATE&lt;= D_Verify_PIN;
								elsif(Confirm_PIN = '0') then
									NX_STATE&lt;= D_Enter_new_PIN;
								end if;
			when D_Verify_PIN =&gt; 	if (Rez_ver_PIN = '0') then
									NX_STATE&lt;=D_Enter_new_PIN;
								elsif (Rez_ver_PIN = '1') then
									NX_STATE&lt;=D_Modify_PIN;
								end if;
			when D_Modify_PIN =&gt;	if(urm = '1') then
									NX_STATE&lt;=M_wait_sel;
								elsif(urm = '0') then
									NX_STATE&lt;=D_Modify_PIN;
								end if;

			
			when others =&gt;	NX_STATE&lt;= M_begin;
		end case;							
	end process;

OUTPUT: process(STATE, rez_comp, rez_ver_PIN, Ok_PIN, urm)
	   begin 
			En_Ram_Pin &lt;='0';
			En_Ram_Sold&lt;='0';
			En_comp &lt;='0';
			En_RAM_papers &lt;='0';
			EN_scz &lt;='0';
			EN_sum &lt;='0';
			EN_Afisor &lt;='0';
			mode &lt;='0';
			Starea_M &lt;='0';
			Starea_A &lt;='0';
			Starea_B &lt;='0';
			Starea_C &lt;='0';
			Starea_D &lt;='0';

			
	   		case STATE is
	   			when M_begin =&gt; Starea_M &lt;='1';

				when M_Check_PIN =&gt; En_Ram_Pin&lt;='1';
	   						 	mode &lt;= '0';
	   						 	Starea_M &lt;='1';
	  
	   			when A_display =&gt;	En_Ram_Sold &lt;='1';
	   						   	EN_Afisor &lt;='1';
	   						   	mode &lt;= '0';
								Starea_A &lt;='1';

				when B_Wait_for_sum =&gt; Starea_B &lt;='1';
				
	   			when B_Compare_account =&gt; En_comp &lt;='1';
	   								 EN_Ram_Sold&lt;='1';
							 		 Starea_B &lt;='1';
		 
	   			when B_Substract =&gt; EN_scz &lt;='1';
	   							En_RAM_papers&lt;='1';
	   							EN_Ram_Sold&lt;='1';
	   							En_Ram_Pin &lt;='1';
	   							mode &lt;= '0';
							 	Starea_B &lt;='1';
	   							
	   			when B_Delay =&gt; 	EN_scz &lt;='1';
	   							En_RAM_papers&lt;='1';
	   							EN_Ram_Sold&lt;='1';
							 	Starea_B &lt;='1';

				when C_Wait_for_sum =&gt; Starea_C &lt;='1';
	   						
	   			when C_Add_account =&gt;	EN_sum &lt;='1';
	   								En_RAM_papers&lt;='1';
	   								EN_Ram_Sold&lt;='1';
	   								mode &lt;= '0';
							  		Starea_C &lt;='1';

				when C_Delay =&gt; 	EN_sum &lt;='1';
	   							En_RAM_papers&lt;='1';
	   							EN_Ram_Sold&lt;='1';
							  	Starea_C &lt;='1';

				when D_Enter_new_PIN =&gt; Starea_D &lt;='1';
	   					
	   			when D_Verify_PIN =&gt;En_Ram_Pin&lt;='1';
								Starea_D &lt;='1';
	   			
	   			when D_Modify_PIN =&gt; En_Ram_Pin&lt;='1';
	   							 mode &lt;= '1';
								 Starea_D &lt;='1';
	   							  
	   			when others =&gt; EN_Afisor &lt;='0';
	   	end case;
	   end process;
END UC_Architecture;
</vhdl>
  <vhdl name="convertor_suma">--convertor date codificat intr-o suma
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.numeric_std.all;

ENTITY convertor_suma IS
  PORT (input : in std_logic_vector(11 downto 0);
        output : out std_logic_vector(9 downto 0)
);
END convertor_suma;

ARCHITECTURE TypeArchitecture OF convertor_suma IS

BEGIN
    process(input)
    variable sum : integer := 0;

    begin
        sum:=to_integer(unsigned(input(11 downto 9)))*500 + to_integer(unsigned(input(8 downto 6)))*100 + to_integer(unsigned(input(5 downto 3)))*50 + to_integer(unsigned(input(2 downto 0)))*10;
        output&lt;= std_logic_vector(to_unsigned(sum, 10));
	end process;
END TypeArchitecture;</vhdl>
  <vhdl name="citire_bancnote">LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.numeric_std.all;

ENTITY citire_bancnote IS
  PORT (
		button: in std_logic;
  	   	bancnota: in std_logic_vector(1 downto 0);
  	   	output : out std_logic_vector(11 downto 0);
  	   	ok : in std_logic);
END citire_bancnote;

ARCHITECTURE arh1 OF citire_bancnote IS

signal out_cod: std_logic_vector(11 downto 0) :="000000000000";
BEGIN

	process(bancnota, ok, button)
	variable cnt500: integer := 0;
	variable cnt100: integer := 0;
	variable cnt50: integer := 0;
	variable cnt10: integer := 0;
	begin	
		case bancnota is
			when "00" =&gt; if(button = '1' and button'event) then
						   	cnt10:=cnt10+1;
					   out_cod(2 downto 0)&lt;= std_logic_vector(to_unsigned(cnt10, 3));
					   end if;
			when "01" =&gt; if(button = '1' and button'event) then
						   	cnt50:=cnt50+1;
					   out_cod(5 downto 3)&lt;= std_logic_vector(to_unsigned(cnt50, 3));
					   end if;
			when "10" =&gt; if(button = '1' and button'event) then
						   	cnt100:=cnt100+1;
					   out_cod(8 downto 6)&lt;= std_logic_vector(to_unsigned(cnt100, 3));
					   end if;
			when others =&gt;if(button = '1' and button'event) then
						   	cnt500:=cnt500+1; 
					    out_cod(11 downto 9)&lt;= std_logic_vector(to_unsigned(cnt500, 3));
					    end if;
			end case;
		if(ok = '1') then
			output&lt;=out_cod;
		elsif(ok = '0') then
			output&lt;="000000000000";
		end if;
end process;

END arh1;
</vhdl>
  <vhdl name="citire_PIN">

LIBRARY ieee;
USE ieee.std_logic_1164.all;

ENTITY citire_PIN IS
	PORT (
  		cifra1, cifra2, cifra3, cifra4 : in std_logic_vector(1 downto 0);
  		confirm_pin : in std_logic;
  		output : out std_logic_vector(7 downto 0)
    	);
END citire_PIN;


ARCHITECTURE arh OF citire_PIN IS

BEGIN
	process(cifra1, cifra2, cifra3, cifra4, confirm_pin)
		variable val : std_logic_vector(7 downto 0);
	begin

		val(7 downto 6) := cifra1;
		val(5 downto 4) := cifra2;
		val(3 downto 2) := cifra3;
		val(1 downto 0) := cifra4;
		if(confirm_pin = '1') then
			output &lt;= val;
		end if;
	end process;

END arh;
</vhdl>
  <vhdl name="afisor_structural">
LIBRARY ieee;
USE ieee.std_logic_1164.all;

ENTITY afisor_structural IS
	PORT (
		clk, enable : in std_logic;
  		input : in std_logic_vector(9 downto 0);
    		output_afisor : out std_logic_vector(6 downto 0);
    		output_mux : out std_logic_vector(3 downto 0) 		
    	);
END afisor_structural;


ARCHITECTURE arh_afisor_struct OF afisor_structural IS

	component counter_afisor_div IS
		PORT (
			clk , enable: in std_logic;
	  		out_cnt : out std_logic_vector(16 downto 0)
		);
	END component;

	component dcd_suma_afisor IS
		PORT (
			input : in std_logic_vector(9 downto 0);
			unit, zeci, sute, mii : out std_logic_vector(3 downto 0)
	    	);
	END component;

	component mux_anod_afisor IS
		PORT (
	 		sel : in std_logic_vector(1 downto 0);
	 		output: out std_logic_vector(3 downto 0)
		);
	END component;

	component mux_cifra_afisor IS
		PORT (
	  		input0, input1, input2, input3 : in std_logic_vector(3 downto 0);
	  		sel : in std_logic_vector(1 downto 0);
	  		output : out std_logic_vector(3 downto 0)
	    	);
	END component;

	component dcd_hexa_7seg_afisor IS
	  	PORT (
	  		input : in	 std_logic_vector(3 downto 0);
	  		output : out std_logic_vector(6 downto 0)
	    	);
	END component;
	
	signal s_unit, s_zeci, s_sute, s_mii : std_logic_vector(3 downto 0);
	signal s_out_cnt : std_logic_vector(16 downto 0);
	signal s_output_cifra_afisor : std_logic_vector(3 downto 0);
	
BEGIN
	p_counter_afisor : counter_afisor_div port map (clk, enable, s_out_cnt);
	
p_dcd_suma_afisor : dcd_suma_afisor port map (input, s_unit, s_zeci, s_sute, s_mii);
	p_mux_cifra_afisor : mux_cifra_afisor port map (s_unit, s_zeci, s_sute, s_mii, s_out_cnt(1 downto 0), s_output_cifra_afisor);
	p_dcd_hexa_7seg_afisor : dcd_hexa_7seg_afisor port map (s_output_cifra_afisor, output_afisor);
	p_mux_anod_afisor : mux_anod_afisor port map (s_out_cnt(1 downto 0), output_mux);
END arh_afisor_struct;


-------------------------------------------------------------------------------------------------------------------------------

LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_unsigned.all;


ENTITY counter_afisor_div IS
	PORT (
  		clk , enable: in std_logic;
  		out_cnt : out std_logic_vector(16 downto 0)
	);
END counter_afisor_div;


ARCHITECTURE arh_cnt OF counter_afisor_div IS

	signal cnt : std_logic_vector(16 downto 0) := "00000000000000000";
	signal div_clk: std_logic := '0';
	signal nr_div: integer := 1;
BEGIN
	process(clk, nr_div, enable)
	BEGIN
		if(enable = '1') then
			if(clk = '1' and clk'event) then 
				if(nr_div = 4) then
					nr_div &lt;= 1;
				elsif(nr_div = 2) then 
					div_clk &lt;= '0';
					nr_div &lt;= nr_div + 1;
				else
					div_clk &lt;= '1';
					nr_div &lt;= nr_div + 1;
				end if;
			end if;
		end if;
	end process;

	
	process(div_clk, enable)
	begin
		if(enable = '1') then
			if(div_clk = '1' and div_clk'event) then 
				cnt &lt;= cnt + 1;
			end if;
		end if;
	end process;
	out_cnt &lt;= cnt;

END arh_cnt;
 
-------------------------------------------------------------------------------------------------------------------------------

LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_unsigned.all;
use ieee.numeric_std.all;
use ieee.numeric_std.all;

ENTITY dcd_suma_afisor IS
	PORT (
		input : in std_logic_vector(9 downto 0);
		unit, zeci, sute, mii : out std_logic_vector(3 downto 0)
    	);
END dcd_suma_afisor;


ARCHITECTURE arh_dcd OF dcd_suma_afisor IS

	signal a : natural;
BEGIN
	a &lt;= conv_integer(input);
	unit &lt;= std_logic_vector(to_unsigned(a rem 10, 4));
	zeci &lt;= std_logic_vector(to_unsigned(a/10 rem 10, 4));
	sute &lt;= std_logic_vector(to_unsigned(a/100 rem 10, 4));
	mii &lt;= std_logic_vector(to_unsigned(a/1000 rem 10, 4));
END arh_dcd;

-------------------------------------------------------------------------------------------------------------------------------

LIBRARY ieee;
USE ieee.std_logic_1164.all;

ENTITY mux_anod_afisor IS
	PORT (
 		sel : in std_logic_vector(1 downto 0);
 		output: out std_logic_vector(3 downto 0)
	);
END mux_anod_afisor;


ARCHITECTURE arh_mux_anod OF mux_anod_afisor IS

BEGIN

	process(sel)
	begin
		case sel is
			when "00" =&gt; output &lt;= "0001";
			when "01" =&gt; output &lt;= "0010";
			when "10" =&gt; output &lt;= "0100";
			when others =&gt; output &lt;= "1000";

		end case;
	end process;
END arh_mux_anod;

-------------------------------------------------------------------------------------------------------------------------------

LIBRARY ieee;
USE ieee.std_logic_1164.all;

ENTITY mux_cifra_afisor IS
	PORT (
  		input0, input1, input2, input3 : in std_logic_vector(3 downto 0);
  		sel : in std_logic_vector(1 downto 0);
  		output : out std_logic_vector(3 downto 0)
    	);
END mux_cifra_afisor;


ARCHITECTURE arh_mux_cifra OF mux_cifra_afisor IS

BEGIN

	process(sel, input0, input1, input2, input3)
	begin
		case sel is
			when "00" =&gt; output &lt;= input0;
			when "01" =&gt; output &lt;= input1;
			when "10" =&gt; output &lt;= input2;
			when others =&gt; output &lt;= input3;

		end case;
	end process;

END arh_mux_cifra;

-------------------------------------------------------------------------------------------------------------------------------

LIBRARY ieee;
USE ieee.std_logic_1164.all;

ENTITY dcd_hexa_7seg_afisor IS
  	PORT (
  		input : in std_logic_vector(3 downto 0);
  		output : out std_logic_vector(6 downto 0)
    	);
END dcd_hexa_7seg_afisor;


ARCHITECTURE arh_7seg OF dcd_hexa_7seg_afisor IS

BEGIN

	output &lt;= 	"1111110" when input = x"0" else
				"0110000" when input = x"1" else
				"1101101" when input = x"2" else
				"1111001" when input = x"3" else
				"0110011" when input = x"4" else
				"1011011" when input = x"5" else
				"1011111" when input = x"6" else
				"1110000" when input = x"7" else
				"1111111" when input = x"8" else
				"1111011" when input = x"9" else
				"1110111" when input = x"A" else
				"0011111" when input = x"B" else
				"1001110" when input = x"C" else
				"0111101" when input = x"D" else
				"1001111" when input = x"E" else
				"1000111" when input = x"F"; 
END arh_7seg;

</vhdl>
  <vhdl name="scazator_retragere">--scazator
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.numeric_std.all;


ENTITY scazator_retragere IS
  PORT (enable: in std_logic;
  	   scz_banc: in std_logic_vector(11 downto 0);
  	   scz_cont_util: in std_logic_vector(11 downto 0);
  	   scz_de_scazut: in std_logic_vector(11 downto 0);
  	   out_RAM_banc: out std_logic_vector(11 downto 0);
  	   out_RAM_cont: out std_logic_vector(11 downto 0);
  	   succes: out std_logic);
END scazator_retragere;

ARCHITECTURE TypeArchitecture OF scazator_retragere IS
BEGIN
	process(enable, scz_banc, scz_de_scazut)
	variable var_500: integer := 0;
     variable var_100: integer := 0;
     variable var_50: integer := 0;
     variable var_10: integer := 0;
     variable cmp2, cmp1: integer:=0;
     variable ok: std_logic:='1';
     variable sum: std_logic_vector(11 downto 0):="000000000000";
	begin
		out_RAM_banc &lt;="000000000000";
		out_RAM_cont &lt;="000000000000";
		succes &lt;= '0';
		if(enable = '1') then
				cmp2:=to_integer(unsigned(scz_banc(11 downto 9)))*500 + to_integer(unsigned(scz_banc(8 downto 6)))*100 + to_integer(unsigned(scz_banc(5 downto 3)))*50 + to_integer(unsigned(scz_banc(2 downto 0)))*10;
				cmp1:=to_integer(unsigned(scz_de_scazut(11 downto 9)))*500 + to_integer(unsigned(scz_de_scazut(8 downto 6)))*100 + to_integer(unsigned(scz_de_scazut(5 downto 3)))*50 + to_integer(unsigned(scz_de_scazut(2 downto 0)))*10;
			
				if(cmp2 &gt;= cmp1) then -- cand suma adunata in RAM_banc este mai mare decat ce cere utilizatorul 
					succes&lt;='1';
					var_500:=to_integer(unsigned(scz_banc(11 downto 9)))- to_integer(unsigned(scz_de_scazut(11 downto 9)));
					var_100:=to_integer(unsigned(scz_banc(8 downto 6)))- to_integer(unsigned(scz_de_scazut(8 downto 6)));
					var_50:=to_integer(unsigned(scz_banc(5 downto 3)))- to_integer(unsigned(scz_de_scazut(5 downto 3)));
					var_10:=to_integer(unsigned(scz_banc(2 downto 0)))- to_integer(unsigned(scz_de_scazut(2 downto 0)));

					
					for i in 0 to 6 loop
						if(var_500 &lt; 0) then
							var_100:=var_100 - 5;
							var_500:=var_500 + 1;
						end if;
						end loop;
					if(var_500 &lt; 0) then
						ok := '0';
					end if;
					
					for i in 0 to 6 loop
						if(var_100 &lt; 0) then
							var_100:=var_100 +1;
							var_50:=var_50 - 2;
						end if;
					end loop;
					if(var_100 &lt; 0) then
						ok := '0';
					end if;
					
					for i in 0 to 6 loop
						if(var_50 &lt; 0) then
							var_50:=var_50 +1;
							var_10:=var_10 - 5;
						end if;
					end loop;
					if(var_50 &lt; 0) then
						ok := '0';
					end if;

					if(var_10 &lt; 0) then
						ok := '0';
					end if;
	
				sum(11 downto 9):= std_logic_vector(to_unsigned(var_500, 3));
				sum(8 downto 6):= std_logic_vector(to_unsigned(var_100, 3));
				sum(5 downto 3):= std_logic_vector(to_unsigned(var_50, 3));
				sum(2 downto 0):= std_logic_vector(to_unsigned(var_10, 3));
			
				if(ok ='1') then
					out_RAM_banc&lt;= sum;
					succes&lt;='1';

					var_500:=to_integer(unsigned(scz_cont_util(11 downto 9)))- to_integer(unsigned(scz_de_scazut(11 downto 9)));
					var_100:=to_integer(unsigned(scz_cont_util(8 downto 6)))- to_integer(unsigned(scz_de_scazut(8 downto 6)));
					var_50:=to_integer(unsigned(scz_cont_util(5 downto 3)))- to_integer(unsigned(scz_de_scazut(5 downto 3)));
					var_10:=to_integer(unsigned(scz_cont_util(2 downto 0)))- to_integer(unsigned(scz_de_scazut(2 downto 0)));

					sum(11 downto 9):= std_logic_vector(to_unsigned(var_500, 3));
					sum(8 downto 6):= std_logic_vector(to_unsigned(var_100, 3));
					sum(5 downto 3):= std_logic_vector(to_unsigned(var_50, 3));
					sum(2 downto 0):= std_logic_vector(to_unsigned(var_10, 3));
					out_RAM_cont&lt;=sum;
					
				else
					out_RAM_banc &lt;=scz_banc;
					out_RAM_cont &lt;=scz_cont_util;
					succes&lt;='0';
				end if;
			else
				out_RAM_banc &lt;= scz_banc;
				out_RAM_banc&lt;=scz_cont_util;
				succes&lt;='0';
			end if;
		end if;
	end process;
END TypeArchitecture;</vhdl>
  <vhdl name="sumator_depunere">--sumator
LIBRARY ieee;
USE ieee.std_logic_1164.all;

USE ieee.numeric_std.all;
ENTITY sumator_depunere IS
  PORT (enable: in std_logic;
  	   sum_cont: in std_logic_vector(11 downto 0);
  	   sum_bancnote: in std_logic_vector(11 downto 0);
  	   sum_adunat: in std_logic_vector(11 downto 0);
  	   out_RAM_banc: out std_logic_vector(11 downto 0);
  	   out_RAM_util: out std_logic_vector(11 downto 0);
  	   succes: out std_logic
  	   );
END sumator_depunere;



ARCHITECTURE TypeArchitecture OF sumator_depunere IS

BEGIN

	process(enable, sum_cont, sum_bancnote, sum_adunat)
	variable var_500: integer := 0;
     variable var_100: integer := 0;
     variable var_50: integer := 0;
     variable var_10: integer := 0;
     variable sum: std_logic_vector(11 downto 0):="000000000000";
	begin
		succes &lt;= '0';
		if(enable = '1') then 
			var_500:=to_integer(unsigned(sum_cont(11 downto 9)))+ to_integer(unsigned(sum_adunat(11 downto 9)));
			var_100:=to_integer(unsigned(sum_cont(8 downto 6)))+ to_integer(unsigned(sum_adunat(8 downto 6)));
			var_50:=to_integer(unsigned(sum_cont(5 downto 3)))+ to_integer(unsigned(sum_adunat(5 downto 3)));
			var_10:=to_integer(unsigned(sum_cont(2 downto 0)))+ to_integer(unsigned(sum_adunat(2 downto 0)));
			sum(11 downto 9):= std_logic_vector(to_unsigned(var_500, 3));
			sum(8 downto 6):= std_logic_vector(to_unsigned(var_100, 3));
			sum(5 downto 3):= std_logic_vector(to_unsigned(var_50, 3));
			sum(2 downto 0):= std_logic_vector(to_unsigned(var_10, 3));

			out_RAM_util&lt;=sum;

			var_500:=to_integer(unsigned(sum_bancnote(11 downto 9)))+ to_integer(unsigned(sum_adunat(11 downto 9)));
			var_100:=to_integer(unsigned(sum_bancnote(8 downto 6)))+ to_integer(unsigned(sum_adunat(8 downto 6)));
			var_50:=to_integer(unsigned(sum_bancnote(5 downto 3)))+ to_integer(unsigned(sum_adunat(5 downto 3)));
			var_10:=to_integer(unsigned(sum_bancnote(2 downto 0)))+ to_integer(unsigned(sum_adunat(2 downto 0)));
			sum(11 downto 9):= std_logic_vector(to_unsigned(var_500, 3));
			sum(8 downto 6):= std_logic_vector(to_unsigned(var_100, 3));
			sum(5 downto 3):= std_logic_vector(to_unsigned(var_50, 3));
			sum(2 downto 0):= std_logic_vector(to_unsigned(var_10, 3));

			out_RAM_banc&lt;=sum;
			succes &lt;= '1';
		else
			out_RAM_banc&lt;="000000000000";
			out_RAM_util&lt;="000000000000";
			succes &lt;= '0';
		end if;

	end process;
END TypeArchitecture;</vhdl>
  <vhdl name="delayer">LIBRARY ieee;&#13;
USE ieee.std_logic_1164.all;&#13;
&#13;
ENTITY delayer IS&#13;
  PORT (&#13;Input: in std_logic;
  	   Output: out std_logic);&#13;
END delayer;&#13;

ARCHITECTURE TypeArchitecture OF delayer IS&#13;
BEGIN&#13;
	process(Input)
	begin
		if( Input = '1') then
			Output&lt;='1' after 100 ns;
		else
			Output&lt;='0' after 100 ns;
		end if;
&#13;	end process;
END TypeArchitecture;&#13;
</vhdl>
  <vhdl name="SAU_1Bit">LIBRARY ieee;&#13;
USE ieee.std_logic_1164.all;&#13;
&#13;
ENTITY SAU_1Bit IS&#13;
  PORT (&#13;Input1, Input2: in std_logic;
  	   Output: out std_logic);&#13;
END SAU_1Bit;&#13;

ARCHITECTURE TypeArchitecture OF SAU_1Bit IS&#13;
&#13;
BEGIN&#13;
&#13;	Output&lt;=Input1 or Input2;

END TypeArchitecture;&#13;
</vhdl>
  <vhdl name="SAU_12Biti">LIBRARY ieee;&#13;
USE ieee.std_logic_1164.all;&#13;
&#13;
ENTITY SAU_12Biti IS&#13;
  PORT (&#13;Input1, Input2: in std_logic_vector(11 downto 0);
  	   Output: out std_logic_vector(11 downto 0));&#13;
END SAU_12Biti;&#13;

ARCHITECTURE TypeArchitecture OF SAU_12Biti IS&#13;
&#13;
BEGIN&#13;
	Output&lt;=Input1 or Input2;
&#13;
END TypeArchitecture;&#13;
</vhdl>
  <vhdl name="debouncer">LIBRARY ieee;
USE ieee.std_logic_1164.all;

ENTITY debouncer IS
  PORT (
 buton, clk: in std_logic;
         iesire: out std_logic
    );
END debouncer;

ARCHITECTURE TypeArchitecture OF debouncer IS
BEGIN
    process(buton, clk)
    variable num: integer:=0;
    begin 
    if(buton='1') then
         if(rising_edge(clk)) then num:=num+1;
         end if;
    else num:=0;
    end if;

    if(num&gt;15) then iesire&lt;='1';
    else iesire&lt;='0';
        end if;
    end process;  
END TypeArchitecture;</vhdl>
  <vhdl name="div_frecv">LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_unsigned.all;


ENTITY div_frecv IS
	PORT (
  		clk : in std_logic;
  		clk_out : out std_logic
	);
END div_frecv;

ARCHITECTURE arh_cnt OF div_frecv IS

	signal clk_div: std_logic := '0';
	signal cnt: integer := 0;
BEGIN
	process(clk, cnt)
	BEGIN
		if(clk = '1' and clk'event) then 
				if(cnt = 2) then
					cnt &lt;= 1;
					clk_div &lt;= not clk_div;
				else 
					cnt &lt;= cnt+1;
				end if;
		end if;
	end process;
	clk_out &lt;= clk_div;

END arh_cnt;</vhdl>
  <vhdl name="not1">
LIBRARY ieee;&#13;
USE ieee.std_logic_1164.all;&#13;
&#13;
ENTITY not1 IS&#13;
  PORT (&#13;input: in std_logic;
  	   output: out std_logic);&#13;
END not1;&#13;

ARCHITECTURE TypeArchitecture OF not1 IS&#13;
&#13;
BEGIN&#13;
	output&lt;=not input;&#13;
&#13;
END TypeArchitecture;&#13;
</vhdl>
</project>
